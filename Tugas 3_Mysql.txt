Script Tugas3 SQl Rizky Anggita :

//Masuk ke mariaDB ke dalam CMD
cd xampp\mysql\bin
mysql -u root -p

//Membuat database baru
CREATE DATABASE dbMSIB5;

//Menampilkan database
SHOW DATABASES;

//Masuk database dbpegawai
use dbpos;



* Isi data table pelanggan minimal 6 data lagi
INSERT INTO pelanggan (id, kode, nama, jk, tmp_lahir, tgl_lahir, email, kartu_id) 
VALUES 
('', 'A100', 'Gita', 'P', 'Tangsel', '2002-09-08', 'rzkanggita@gmail.com', '2'),
('', 'A200', 'Rara', 'P', 'Tangsel', '2002-02-08', 'rayhanatz9@gmail.com', '3'),
('', 'A300', 'Dimas', 'L', 'Depok', '2000-06-05', 'dimjay0606@gmail.com', '2'),
('', 'A400', 'Rifky', 'L', 'Tangsel', '2005-11-04', 'rfkramadhan01@gmail.com', '3'),
('', 'A500', 'Eta', 'P', 'Tangsel', '2002-10-30', 'floreta@gmail.com', '4');

* Isi data table produk minimal 5 data lagi
INSERT INTO produk (id, kode, nama, harga_beli, harga_jual, stok, min_stok, jenis_produk_id)
VALUES
('', 'tv001', 'TV', '2500000', '1500000', '5', '2', '1'),
('', 'ac002', 'AC', '3000000', '2000000', '15', '2', '2'),
('', 'RD003', 'Radio', '1500000', '800000', '7', '2', '3'),
('', 'kps004', 'Kipas', '300000', '150000', '10', '2', '4'),
('', 'hp005', 'HP', '6000000', '3500000', '5', '2', '5');

*Tugas Worksheet 1 :
// tabel pesanan_items
CREATE TABLE pesanan_items (
    id int AUTO_INCREMENT PRIMARY KEY,
    produk_id int not null REFERENCES produk(id),
    pesanan_id int not null REFERENCES pesan(id),
    qty int,
    harga double);

// tabel pembelian
CREATE TABLE pembelian (
    id int AUTO_INCREMENT PRIMARY KEY,
    tanggal varchar(45) not null UNIQUE,
    nomor varchar(10) not null,
    produk_id int not null REFERENCES produk(id),
    jumlah int not null,
    harga double,
    vendor_id int not null REFERENCES vendor(id));

// tabel vendor
CREATE TABLE vendor (
    id int AUTO_INCREMENT PRIMARY KEY,
    nomor varchar(4) not null,
    nama varchar(40) not null UNIQUE,
    Kota varchar(30) not null,
    kontak varchar(30) not null);

Soal Worksheet 2
* 2.2
    // menampilkan data produk yang stoknya 3 dan 10
    SELECT * from produk WHERE stok=3 OR stok=10;

    //menampilkan data produk yang harga jualnya kurang dari 5 juta tetapi lebih dari 500 ribu
    SELECT * FROM produk WHERE harga_jual < 5000000 AND harga_jual > 500000;

    //menampilkan data produk yang harus segera ditambah stoknya
    SELECT * FROM produk WHERE min_stok > stok;

    //menampilkan data pelanggan mulai dari yang paling muda
    SELECT * FROM pelanggan ORDER BY tgl_lahir DESC;

    //menampilkan data pelanggan yang lahirnya di Jakarta dan gendernya perempuan
    SELECT * FROM pelanggan WHERE tmp_lahir='jakarta' AND jk='P';

    //menampilkan data pelanggan yang ID nya 2, 4 dan 6
    SELECT * from pelanggan WHERE id IN (2,4,6);

    //menampilkan data produk yang harganya antara 500 ribu sampai 6 juta
    SELECT * FROM produk WHERE harga_jual >= 500000 AND harga_jual<= 6000000;

* 2.3
    //menampilkan produk yang kode awalnya huruf K dan huruf M
    SELECT * FROM produk WHERE kode LIKE 'K%' OR kode LIKE 'M%';

    //menampilkan produk yang kode awalnya bukan huruf M
    SELECT * FROM produk WHERE kode NOT LIKE 'M%';

    //menampilkan produk-produk televisi
    SELECT * FROM produk WHERE nama = 'TElevisi';

    //menampilkan pelanggan mengandung huruf 'SA'
    SELECT * FROM pelanggan WHERE nama LIKE '%SA%';

    //menampilkan pelanggan yang lahirnya bukan di Jakarta dan mengandung huruf ‘yo‘
    SELECT * FROM pelanggan WHERE tmp_lahir != 'Jakarta' AND nama LIKE '%yo%';

    //menampilkan pelanggan yang karakter huruf ke – 2 nya adalah A
    SELECT * FROM pelanggan WHERE SUBSTRING(nama, 2, 1) = 'A';

* 2.4
    //menammpilkan 2 data produk termahal
    SELECT *FROM produk ORDER BY harga_beli DESC LIMIT 2;

    //menammpilkan produk yang paling murah
    SELECT * FROM produk ORDER BY harga_beli ASC LIMIT 2;

    //menammpilkan produk yang stoknya paling banyak
    SELECT * FROM produk ORDER BY stok DESC LIMIT 2;

    //menammpilkan dua produk yang stoknya paling sedikit
    SELECT * FROM produk ORDER BY stok ASC LIMIT 2;

    //menammpilkan pelanggan yang paling muda
    SELECT * FROM pelanggan ORDER BY tgl_lahir DESC LIMIT 1;

    //menammpilkan pelanggan yang paling tua
    SELECT * FROM pelanggan ORDER BY tgl_lahir ASC LIMIT 1;